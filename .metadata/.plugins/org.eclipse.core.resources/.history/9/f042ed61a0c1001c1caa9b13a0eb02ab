package tidaMq;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;



class main
{
	public static void useQueue() {
		
	}
	
	 public static void main (String[] args) throws IOException
	 {
//		 File myfile = new File("/home/buidat/eclipse-workspacjava /tidaMqFile/queue1.txt");
//		 List<queue> q = new ArrayList<queue>(); 
		 List<queue> listQueue = new ArrayList<>();
		 
//		 WriteToDiskThread read = new WriteToDiskThread("readDisk", myfile,"");
//		 
//		 if(!myfile.createNewFile()) {
//			 list = read.ReadFromFile(myfile);
//			 for(String s: list) {
//				 q.enqueue(s) ;
//			 }
//			 
//		 }
		 
		//Creating a File object for directory
	      File directoryPath = new File("/home/buidat/eclipse-workspacjava /tidaMqFile");
	      //List of all files and directories
	      File filesList[] = directoryPath.listFiles();
	      System.out.println("List of files and directories in the specified directory:");
	      for(File file : filesList) {
	    	  WriteToDiskThread read = new WriteToDiskThread("readDisk", file,"");
	    	  List<String> list = read.ReadFromFile(file);
	    	  queue q = new queue(list.size(), file.getName().split(".")[0], "0");
	    	  listQueue.add(q) ;
	    	  System.out.println(file.getName()) ;
	      }
		
		 
	     while(true) {
	    	 String str ;
	    	 Scanner sc = new Scanner(System.in) ;
	    	 str = sc.nextLine() ; 
	    	 
			 ExecutorService executor = Executors.newSingleThreadExecutor();
	    	 
	    	 str= str.trim() ;
	    	 String[] arg = str.split(" ") ; 
	    	 
	    	 switch (arg[0]) {
	    	 	case "create":
	    	 		queue newque = new queue(Integer.parseInt(arg[1]), arg[2], arg[3]) ;
	    	 		break ;
	    	 	case "use":
	    	 		
	    	 		break ;
				case "add":
					Runnable writeDisk = new WriteToDiskThread("writedisk", myfile,arg[1]);
					executor.execute(writeDisk) ;
					q.enqueue(arg[1]);
					break;
				case "pop":
					Runnable popDisk = new WriteToDiskThread("deleteDisk", myfile,"");
					executor.execute(popDisk) ;
					String val = q.dequeue();
					System.out.println(val) ;
					break;
				case "get":
					System.out.println(q.peek());
					break;
				case "list":
					q.list();
					break;
				default:
					System.out.println("Sai cú pháp, mời nhập lại");
					break;
			}
	    	executor.shutdown() ;
	    	
    	    while (!executor.isTerminated()) {
    	    	System.out.println("thread running..");
            }
	    	
	     } 
	     
	    
	     
	 }
}