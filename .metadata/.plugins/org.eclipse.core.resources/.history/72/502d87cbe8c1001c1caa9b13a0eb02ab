package tidaMq;

import java.awt.Window.Type;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;



class main
{
	public static void useQueue() {
		
	}
	
	 public static void main (String[] args) throws IOException
	 {
		 List<queue> listQueue = new ArrayList<>();
		 queue q = new 	queue() ; 
		 
		//Creating a File object for directory
	      File directoryPath = new File("/home/buidat/eclipse-workspacjava /tidaMqFile");
	      //List of all files and directories
	      File filesList[] = directoryPath.listFiles();
	      System.out.println("List of files and directories in the specified directory:");
	      for(File file : filesList) {
	    	  WriteToDiskThread read = new WriteToDiskThread();
	    	  
	    	  List<String> list = read.ReadFromFile(file);
	    	  String fileName = file.getName() ;
	    	  queue nq = new queue(list.size(), fileName.split("\\.")[0], "1");
	    	  
	    	  for(String s:list) {
	    		  nq.enqueue(s);
	    	  }
	    	  listQueue.add(nq) ;
	    	  System.out.println(file.getName()) ;
	      }
		
		 
	     while(true) {
	    	 String str ;
	    	 Scanner sc = new Scanner(System.in) ;
	    	 str = sc.nextLine() ; 
	    	 
			 ExecutorService executor = Executors.newSingleThreadExecutor();
	    	 
	    	 str= str.trim() ;
	    	 String[] arg = str.split(" ") ; 
	    	 
	    	 switch (arg[0]) {
	    	 	case "create":
	    	 		queue newque = new queue(Integer.parseInt(arg[1]), arg[2], arg[3]) ;
	    	 		listQueue.add(newque) ;
	    	 		break ;
	    	 	case "use":
	    	 		boolean found = false;
	    	 		for(queue qu: listQueue) {
	    	 			System.out.println(qu.name) ;
	    	 			if(qu.name.equals(arg[1])) {
	    	 				q=qu ; 
	    	 				System.out.println("use queue "+ q.name) ;
	    	 				found=true;
	    	 				break;
	    	 			}
	    	 		}
	    	 		if(!found) System.out.println("queue is not exist") ;
	    	 		break ;
				case "add":
					File myfile = new File("/home/buidat/eclipse-workspacjava /tidaMqFile/"+ q.name + ".txt");
					
					if(q.capacity>=q.count) {
						Runnable writeDisk = new WriteToDiskThread("writedisk", myfile,arg[1]);
						executor.execute(writeDisk) ;
						q.enqueue(arg[1]);
					}else {
						System.out.println("Queue is Full");
					}
					
					break;
				case "pop":
					if(q.count!=0) {
						File myfile1 = new File("/home/buidat/eclipse-workspacjava /tidaMqFile/"+ q.name + ".txt");
						Runnable popDisk = new WriteToDiskThread("deleteDisk", myfile1,"");
						executor.execute(popDisk) ;
						String val = q.dequeue();
						System.out.println(val) ;
					}else {
						System.out.println("queue is empty") ;
					}
					
					break;
				case "get":
					if(q.count!=0) {
						System.out.println(q.peek());
					}else {
						System.out.println("queue is empty");
					}
					
					break;
				case "list":
					q.list();
					break;
				case "listAll":
					for(queue q2 : listQueue) {
						System.out.println(q2.name);
					}
					break ;
				case "delete": 
					break ;
				default:
					System.out.println("Sai cú pháp, mời nhập lại");
					break;
			}
	    	executor.shutdown() ;
	    	
    	    while (!executor.isTerminated()) {
    	    	System.out.println("thread running..");
            }
	    	
	     } 
	     
	    
	     
	 }
}